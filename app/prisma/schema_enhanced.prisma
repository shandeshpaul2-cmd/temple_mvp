// Enhanced Temple Management System - Prisma Schema for PostgreSQL
// Optimized for 60,000+ yearly users

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================
// 1. USER MANAGEMENT (New for scalability)
// ============================================================

model User {
  id            String   @id @default(cuid())
  email         String?  @unique
  phone         String   @unique
  name          String
  isAnonymous   Boolean  @default(true) // For users who don't create accounts

  // Profile Information
  address       String?
  city          String?
  state         String?
  pincode       String?
  nakshatra     String?
  gothra        String?
  preferences   Json?    // Store user preferences as JSON

  // Authentication (for future account system)
  emailVerified Boolean  @default(false)
  phoneVerified Boolean  @default(false)
  lastLoginAt   DateTime?

  // Metadata
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  donations     Donation[]
  poojaBookings PoojaBooking[]

  @@index([phone])
  @@index([email])
  @@index([createdAt])
  @@map("users")
}

// ============================================================
// 2. DONATIONS MODULE (Enhanced)
// ============================================================

model Donation {
  id            String   @id @default(cuid())
  receiptNumber String   @unique
  userId        String?  // Nullable for anonymous donations

  // Donation Details
  amount        Float
  donationType  String   @default("General")
  donationPurpose String?
  campaignId    String?  // For future campaign system

  // Payment Details
  paymentStatus     String   @default("PENDING")
  paymentMethod     String   @default("razorpay")
  transactionId     String?
  razorpayOrderId   String?
  razorpayPaymentId String?
  razorpaySignature String?

  // Receipt & Delivery
  receiptPdfUrl     String?
  whatsappSent      Boolean  @default(false)
  whatsappSentAt    DateTime?
  emailSent         Boolean  @default(false)
  emailSentAt       DateTime?

  // Analytics & Tracking
  utmSource         String?
  utmMedium         String?
  utmCampaign       String?
  ipAddress         String?
  userAgent         String?

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user       User?    @relation(fields: [userId], references: [id], onDelete: "SetNull")
  campaign   Campaign? @relation(fields: [campaignId], references: [id])

  @@index([userId])
  @@index([receiptNumber])
  @@index([paymentStatus])
  @@index([createdAt])
  @@index([amount])
  @@map("donations")
}

model DonationCampaign {
  id            String   @id @default(cuid())
  name          String
  description   String?
  targetAmount  Float?
  currentAmount Float    @default(0)
  startDate     DateTime
  endDate       DateTime?
  isActive      Boolean  @default(true)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  donations Donation[]

  @@index([isActive])
  @@index([startDate])
  @@map("donation_campaigns")
}

// ============================================================
// 3. POOJA BOOKING MODULE (Enhanced)
// ============================================================

model PoojaService {
  id              Int      @id @default(autoincrement())
  poojaName       String
  poojaNameKannada String?
  poojaNameHindi   String?
  description     String?
  price           Float
  durationMinutes Int      @default(60)
  isActive        Boolean  @default(true)
  displayOrder    Int      @default(0)
  imageUrl        String?

  // Enhanced scheduling options
  maxBookingsPerSlot Int? @default(5) // Limit bookings per time slot
  requiresAdvanceNotice Boolean @default(true)
  advanceNoticeHours Int @default(24)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings PoojaBooking[]

  @@index([isActive])
  @@index([displayOrder])
  @@index([price])
  @@map("pooja_services")
}

model PoojaBooking {
  id            String   @id @default(cuid())
  bookingNumber String   @unique
  receiptNumber String?  @unique
  userId        String?  // Nullable for non-logged in users

  // User Information (denormalized for performance)
  userName      String
  userPhone     String
  userEmail     String?
  nakshatra     String?

  // Pooja Details
  poojaId       Int
  poojaName     String
  poojaPrice    Float

  // Scheduling
  preferredDate DateTime?
  preferredTime DateTime?
  confirmedDate DateTime?
  confirmedTime DateTime?
  specialInstructions String?

  // Payment Details
  paymentStatus     String    @default("PENDING")
  paymentMethod     String?
  transactionId     String?
  razorpayOrderId   String?
  razorpayPaymentId String?
  razorpaySignature String?

  // Booking Status & Workflow
  bookingStatus            String    @default("PENDING")
  userConfirmationSent     Boolean   @default(false)
  userConfirmationSentAt   DateTime?
  adminNotificationSent    Boolean   @default(false)
  adminNotificationSentAt  DateTime?
  confirmedByAdminId       String?
  confirmedByAdminAt       DateTime?
  completedAt              DateTime?
  cancellationReason       String?
  cancelledAt              DateTime?

  // Analytics
  utmSource         String?
  ipAddress         String?

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user        User?        @relation(fields: [userId], references: [id], onDelete: "SetNull")
  poojaService PoojaService @relation(fields: [poojaId], references: [id])

  @@index([userId])
  @@index([bookingNumber])
  @@index([receiptNumber])
  @@index([poojaId])
  @@index([bookingStatus])
  @@index([paymentStatus])
  @@index([preferredDate])
  @@index([createdAt])
  @@map("pooja_bookings")
}

// ============================================================
// 4. RECEIPT SEQUENCES (Enhanced for fiscal year)
// ============================================================

model ReceiptSequence {
  fiscalYear   String @id
  lastSequence Int    @default(0)

  @@map("receipt_sequence")
}

model BookingSequence {
  fiscalYear   String @id
  lastSequence Int    @default(0)

  @@map("booking_sequence")
}

// ============================================================
// 5. AUDIT LOGS (New for compliance)
// ============================================================

model AuditLog {
  id        String   @id @default(cuid())
  action    String   // CREATE, UPDATE, DELETE, PAYMENT_SUCCESS, etc.
  tableName String   // donations, pooja_bookings, users, etc.
  recordId  String   // ID of the affected record
  oldValues Json?    // Previous values
  newValues Json?    // New values
  userId    String?  // Who performed the action
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())

  @@index([tableName, recordId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

// ============================================================
// 6. SYSTEM CONFIGURATION
// ============================================================

model SystemConfig {
  id        String @id @default(cuid())
  key       String @unique
  value     String
  dataType  String @default("string") // string, number, boolean, json
  updatedAt DateTime @updatedAt

  @@map("system_config")
}